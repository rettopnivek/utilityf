% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utility_functions.R
\name{MLE}
\alias{MLE}
\title{Wrapper for Maximum Likelihood Estimation}
\usage{
MLE(dat, st.fn, mle.fn, nRep = 4, unDef = Inf, ...)
}
\arguments{
\item{dat}{the data to be fitted (formats can vary).}

\item{st.fn}{a function to generate a set of starting values
(must take no parameters and output must match the input length
for the mle.fn function).}

\item{mle.fn}{a function to calculate the negative of the sum of the log-likelihood
(must take two inputs: 1. a vector of parameters, 2. the data).
Note that other estimation methods (e.g. least-squares) can be used
instead if the function mle.fn is defined appropriately.}

\item{nRep}{the number of times to run the estimation routine.
Running the routine multiple times with dispersed starting values
increases the chances of finding the true maximum/minimum instead of
local maxima/minima.}

\item{unDef}{the value returned by mle.fn indicating undefined values
(default is Inf).}

\item{...}{additional parameters for the optim function. For example
additional options can be passed into the parameter 'control' as a list:
control = list( maxit = 1000, fnscale = -1 ), which increases the
number of iterations and use maximization instead of minimization.}
}
\value{
Returns a list with 4 elements:
  MLE - a list of the successful outputs from the optim function;
  start.val - a matrix of the starting values for each successful
    run;
  logLikSum - a vector of the mle.fn function value for each
    successful run;
  run.time - The amount of time the algorithm took.
}
\description{
This function allows multiple runs of the optim function
with random starting values to better control for local
maxima/minima.
}
\examples{
mle.fn = function(par,dat) -sum(dnorm(dat,par[1],exp(par[2]),log=T)) # Likelihood function
st.fn = function() runif( 2, c(50,0),c(150,3) ) # Starting values function
dat = rnorm( 100, 100, 15 ) # Generate data
results = MLE( dat, st.fn, mle.fn )
sel = which( results$logLikSum==min(results$logLikSum)) # Select the minimum
results$MLE[[sel]] # The results
par = results$MLE[[sel]]$par; round( c(par[1],exp(par[2])) ) # The paramaters
}

